HelloWorldWorkflow:
  Comment: 'Returns Hello World'
  StartAt: StartStatus
  States:
    StartStatus:
      Type: Task
      Resource: ${sf2snsStartLambdaFunction.Arn}
      Next: HelloWorld
    HelloWorld:
      CumulusConfig:
        buckets: '{$.meta.buckets}'
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
      Type: Task
      Resource: ${HelloWorldLambdaFunction.Arn}
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${sf2snsEndLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

DiscoverAndQueuePdrs:
  Comment: 'Discovers new PDRs from a given provider'
  StartAt: StartStatus
  States:
    StartStatus:
      Type: Task
      Resource: ${sf2snsStartLambdaFunction.Arn}
      Next: DiscoverPdrs
    DiscoverPdrs:
      CumulusConfig:
        templateUri: '{$.meta.templates.ParsePdr}'
        stack: '{$.meta.stack}'
        provider: '{$.meta.provider}'
        bucket: '{$.meta.buckets.internal}'
        collection: '{$.meta.collection}'
      Type: Task
      Resource: ${DiscoverPdrsLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: QueuePdrs
    QueuePdrs:
      CumulusConfig:
        queueUrl: '{$.meta.queues.startSF}'
        parsePdrMessageTemplateUri: '{$.meta.templates.ParsePdr}'
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
      Type: Task
      Resource: ${QueuePdrsLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${sf2snsEndLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

ParsePdr:
  Comment: 'Parse a given PDR'
  StartAt: StatusReport
  States:
    StatusReport:
      Type: Task
      Resource: ${sf2snsStartLambdaFunction.Arn}
      Next: ParsePdr
    ParsePdr:
      CumulusConfig:
        provider: '{$.meta.provider}'
        bucket: '{$.meta.buckets.internal}'
        stack: '{$.meta.stack}'
      Type: Task
      Resource: ${ParsePdrLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: QueueGranules
    QueueGranules:
      CumulusConfig:
        provider: '{$.meta.provider}'
        internalBucket: '{$.meta.buckets.internal}'
        stackName: '{$.meta.stack}'
        granuleIngestMessageTemplateUri: '{$.meta.templates.IngestGranule}'
        queueUrl: '{$.meta.queues.startSF}'
      Type: Task
      Resource: ${QueueGranulesLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: CheckStatus
    CheckStatus:
      Type: Task
      Resource: ${PdrStatusCheckLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: CheckAgainChoice
    CheckAgainChoice:
      Type: Choice
      Choices:
        - Variable: $.payload.isFinished
          BooleanEquals: false
          Next: PdrStatusReport
        - Variable: $.payload.isFinished
          BooleanEquals: true
          Next: StopStatus
      Default: StopStatus
    PdrStatusReport:
      CumulusConfig:
        cumulus_message:
          input: '{$}'
      ResultPath: null
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: WaitForSomeTime
    WaitForSomeTime:
      Type: Wait
      Seconds: 10
      Next: CheckStatus
    StopStatus:
      Type: Task
      Resource: ${sf2snsEndLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

IngestGranule:
  Comment: 'Ingest Granule'
  StartAt: Report
  States:
    Report:
      Type: Task
      Resource: ${sf2snsStartLambdaFunction.Arn}
      Next: SyncGranule
    SyncGranule:
      CumulusConfig:
        buckets: '{$.meta.buckets}'
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
        cumulus_message:
          outputs:
            - source: '{$.granules}'
              destination: '{$.meta.input_granules}'
            - source: '{$}'
              destination: '{$.payload}'
      Type: Task
      Resource: ${SyncGranuleLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${sf2snsEndLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

EcsHelloWorldWorkflow:
  Comment: 'Returns Hello World'
  StartAt: StartStatus
  States:
    StartStatus:
      Type: Task
      Resource: ${sf2snsStartLambdaFunction.Arn}
      Next: EcsTaskHelloWorld
    EcsTaskHelloWorld:
      CumulusConfig:
        buckets: '{$.meta.buckets}'
        provider: '{$.meta.provider}'
        collection: '{$.meta.collection}'
      Type: Task
      Resource: ${EcsTaskHelloWorldActivity}
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${sf2snsEndLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'
